# This file was *autogenerated* from the file benchmark.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_10 = Integer(10); _sage_const_5 = Integer(5)
load("Subwords_node.sage")

def reg(perm, patts):
    k = [regular.avoids(u) for u in test_patterns]

def func(perm, patts):
    k = [regular.avoids(u) for u in test_patterns]


def benchmark(perm_len, patt_len, tests):
    pass

def my_timeit():
    a = _sage_const_10 
    return timeit.Timer("print a", "from __main__ import my_timeit")
    # timeit.timeit("a^(a^a)")
    # print t.ti

def benchmark_reg_perm(n):
    return Permutations(n).random_element()

def benchmark_functional_perm(n):
    return Perm(list(Permutations(n).random_element()))

def benchmark_list(n, l):
    q = [Permutations(n).random_element() for i in range(l)]
    q = map(list, q)
    return q

if __name__ == '__main__':
    patt_len = _sage_const_5 
    perm_len = _sage_const_10 
    import timeit
    regular = Permutations(perm_len).random_element()
    functional = Perm(list(regular))
    test_patterns = benchmark_list(tests, patt_len)
    print "Patterns: %s" % test_patterns
    print "Permutation: %s" % regular
    print "Running test for regular Permutation"
    timeit.timeit("reg(regular, test_patterns)", setup="from __main__ import reg")
    print "Running test for functional Permutation"
    timeit.timeit("func(functional, test_patterns)", setup="from __main__ import func")





