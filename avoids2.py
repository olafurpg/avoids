# This file was *autogenerated* from the file avoids2.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_12 = Integer(12); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5)
import sys

def inverse_on(patt, perm):
    """Applies perm on patt, perm and patt must be of equal length"""
    if len(patt) != len(patt):
        print "trying to inverse permutations of unequal length"
        sys.exit(_sage_const_0 )
    inv = [_sage_const_0 ] * len(perm)
    for i in range(len(perm)):
        # print i, perm, inv
        inv[perm[i] - _sage_const_1 ] = patt[i]
    return inv

def is_sorted(lst):
    """returns true if lst is sorted, false otherwise"""
    for i in range(_sage_const_1 , len(lst)):
        if lst[i] < lst[i - _sage_const_1 ]:
            return False
    return True

def is_in(perm, patt):
    # print "Is perm=%s in patt=%s ?" % (perm, patt)
    return is_sorted(inverse_on(perm, patt))


def flatten_(lst):
    """return a flattened list, ex. flatten_(3, 4, 2) == [2,3,1]
    slow implementation, O(n^2)"""
    f = [_sage_const_0 ] * len(lst)
    c = list(lst)
    c.sort()
    c.reverse
    for x in xrange(len(lst)):
        f[lst.index(c[x])] = x + _sage_const_1 
    return f

def smooth_out(lst):
    """return a flattened list of a list of lists, i.e. concats the lists inside lst
    ex. smooth_out([[[1,2]], [[2,1]]]) == [[1,2], [2,1]]"""
    return [i for sl in lst for i in sl] # fast python implementation


def avoids_by_in(perm, l, L, patt):
    """Returns a list of lists of subwords of perm of length l using dynamic programming
    L == is the original length"""
    if l == _sage_const_1 : # Base case
        k = [[[i]] for i in perm] # list of lists og lists
        return k
    else:
        smaller = avoids_by_in(perm, l-_sage_const_1 , L, patt) # Solve for l - 1
        if smaller == False: return False # found banned subword
        bigger = [[]] * len(perm)
        f_patt = flatten_(patt[-l:])
        for i, v in enumerate(perm):            # Prepend for every value in perm
            if i < L - l: continue              # Too close to beginning of perm to make subword of length L
            elif i > len(perm) - l + _sage_const_1 : break   # subword must consist of values in perm in order
            f = smooth_out(smaller[i+_sage_const_1 :])       # make a list of subwords out of list of list of subwords
            ith = []
            for subw in f:
                if (v < subw[_sage_const_0 ]) != (f_patt[_sage_const_0 ] < f_patt[_sage_const_1 ]): # if prepending item increasing or decreasing
                    continue # ca. 20% increase in speed for perm12, patt5
                # print "f_patt[-l:]=%s, f_patt=%s" % (f_patt[-l:], f_patt)
                new_subw = [v] + subw # prepend v to pattern
                # print "new_subw=%s, f_patt[-l:]=%s" % (new_subw, f_patt[-l:])
                if is_in(new_subw, f_patt):
                    # print "new_subw=%s is in f_patt[-l:]=%s" % (new_subw, f_patt[-l:])
                    ith.append(new_subw)
                    if l == L: # pattern is in
                        # print "new_subw=%s, flat=%s is in f_patt[-l:]=%s" % (new_subw, flatten_(new_subw), f_patt[-l:])
                        # print "Returning False"
                        return False
                else:
                    pass
                    # print "new_subw=%s is not in patt[-l:]=%s" % (new_subw, patt[-l:])
            bigger[i] = ith # subwords
        if l == L:
            return True
        else:
            return bigger

def prt_2d(arr):
    print ""
    for row in arr:
        print row

# @profile
def avoids_it(perm, patt):
    """Returns a list of lists of subwords of perm of length l using dynamic programming
    L == is the original length"""
    # initializing method variables
    perm_len = len(perm)
    patt_len = len(patt)
    diff = perm_len - patt_len
    f_patts = [None] * patt_len
    sw = [[[] for i in range(perm_len)] for j in range(patt_len)]

    # set up
    for j in range(patt_len - _sage_const_1 , perm_len):
        sw[_sage_const_0 ][j].append([perm[j]])
    for i in range(patt_len):
        f_patts[patt_len - i - _sage_const_1 ] = flatten_(patt[i:])
    # print f_patts[patt_len - 1]

    # iterate through 2d matrix
    for j in reversed(range(perm_len)): # column j
        for i in range(_sage_const_1 , patt_len):       # row i
            # print i, j, diff
            if j + i < patt_len - _sage_const_1 : # top left corner
                continue
            if j + i > perm_len - _sage_const_1 : # bottom right corner
                continue
            # prt_2d(sw)
            # prepend perm[j] to every possible smaller subword
            for k in range(j + _sage_const_1 , perm_len):
                for sub in sw[i - _sage_const_1 ][k]: # for every little subword to prepend to
                    if (perm[j] < sub[_sage_const_0 ]) != (f_patts[i][_sage_const_0 ] < f_patts[i][_sage_const_1 ]): # 20% increase
                        continue # heads of patt and new subword don't match
                    new_subw = [perm[j]] + sub
                    if is_in(new_subw, f_patts[i]):
                        if i == patt_len - _sage_const_1 : # Found total pattern in permutation
                            # print "Founds new_subw=%s in patt=%s" % (new_subw, patt)
                            return False
                        sw[i][j].append([perm[j]] + sub)
    return True # did not find pattern in permutation


patt = Permutations(_sage_const_5 ).random_element()
k = [perm.avoids_it(patt) for perm in Permutations(_sage_const_12 )]


def avoids2_(perm, patt):
    return avoids_by_in(perm, len(patt), len(patt), patt)
